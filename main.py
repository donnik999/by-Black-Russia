import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.client.bot import DefaultBotProperties

# === –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù –∏ TELEGRAM ID ===
BOT_TOKEN = "7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU"
ADMIN_ID = 6712617550  # <-- –¢–≤–æ–π Telegram user_id

DB_NAME = "br_catalog.db"

def db_init():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS ads (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            type TEXT,
            title TEXT,
            description TEXT,
            photo_id TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

db_init()

class AdForm(StatesGroup):
    type = State()
    title = State()
    description = State()
    photo = State()

def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üõí –ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')],
            [KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')],
            [KeyboardButton(text='üì¶ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')],
            [KeyboardButton(text='üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')],
            [KeyboardButton(text='üåü –°–ø–æ–Ω—Å–æ—Ä—ã')]
        ],
        resize_keyboard=True
    )

def get_cancel_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]],
        resize_keyboard=True
    )

def get_type_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞", callback_data="type_sell"),
         InlineKeyboardButton(text="–ü–æ–∫—É–ø–∫–∞", callback_data="type_buy")]
    ])

def get_delete_kb(ad_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{ad_id}")]
    ])

def add_ad(user_id, username, ad_type, title, desc, photo_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''
        INSERT INTO ads (user_id, username, type, title, description, photo_id)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, username, ad_type, title, desc, photo_id))
    conn.commit()
    conn.close()

def get_all_ads():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT id, user_id, username, type, title, description, photo_id, created_at FROM ads ORDER BY id DESC')
    ads = c.fetchall()
    conn.close()
    return ads

def get_user_ads(user_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT id, type, title, description, photo_id, created_at FROM ads WHERE user_id=? ORDER BY id DESC', (user_id,))
    ads = c.fetchall()
    conn.close()
    return ads

def delete_ad(ad_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('DELETE FROM ads WHERE id=?', (ad_id,))
    conn.commit()
    conn.close()

def get_ad(ad_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT id, user_id, username, type, title, description, photo_id, created_at FROM ads WHERE id=?', (ad_id,))
    ad = c.fetchone()
    conn.close()
    return ad

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Black Russia.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=get_main_kb()
    )

@dp.message(F.text == "üõí –ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
async def ads_catalog(message: Message):
    ads = get_all_ads()
    if not ads:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ!", reply_markup=get_main_kb())
        return
    for ad in ads[:10]:
        text = f"<b>–¢–∏–ø:</b> {ad[3].capitalize()}\n<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {ad[4]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {ad[5]}\n<b>–ê–≤—Ç–æ—Ä:</b> @{ad[2] if ad[2] else ad[1]}"
        kb = None
        if message.from_user.id == ADMIN_ID:
            kb = get_delete_kb(ad[0])
        if ad[6]:
            await message.answer_photo(ad[6], caption=text, reply_markup=kb or get_main_kb())
        else:
            await message.answer(text, reply_markup=kb or get_main_kb())

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def add_ad_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=get_type_kb())
    await state.set_state(AdForm.type)

@dp.callback_query(F.data.startswith("type_"), StateFilter(AdForm.type))
async def ad_type_chosen(call: CallbackQuery, state: FSMContext):
    ad_type = call.data.replace("type_", "")
    await state.update_data(type=ad_type)
    await call.message.edit_text(f"–¢–∏–ø –≤—ã–±—Ä–∞–Ω: {'–ü–æ–∫—É–ø–∫–∞' if ad_type == 'buy' else '–ü—Ä–æ–¥–∞–∂–∞'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdForm.title)

@dp.message(StateFilter(AdForm.title))
async def ad_title_entered(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_kb())
        return
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=get_cancel_kb())
    await state.set_state(AdForm.description)

@dp.message(StateFilter(AdForm.description))
async def ad_description_entered(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_kb())
        return
    desc = message.text
    if len(desc) > 400:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(description=desc)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞', –µ—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ):", reply_markup=get_cancel_kb())
    await state.set_state(AdForm.photo)

@dp.message(StateFilter(AdForm.photo), F.photo)
async def ad_photo_entered(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    add_ad(
        user_id=message.from_user.id,
        username=message.from_user.username,
        ad_type=data['type'],
        title=data['title'],
        desc=data['description'],
        photo_id=photo_id
    )
    await state.clear()
    await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å —Ñ–æ—Ç–æ! ‚úÖ", reply_markup=get_main_kb())

@dp.message(StateFilter(AdForm.photo), F.text)
async def ad_no_photo(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_kb())
        return
    data = await state.get_data()
    add_ad(
        user_id=message.from_user.id,
        username=message.from_user.username,
        ad_type=data['type'],
        title=data['title'],
        desc=data['description'],
        photo_id=None
    )
    await state.clear()
    await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ (–±–µ–∑ —Ñ–æ—Ç–æ) ‚úÖ", reply_markup=get_main_kb())

@dp.message(F.text == "üì¶ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def my_ads(message: Message):
    ads = get_user_ads(message.from_user.id)
    if not ads:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=get_main_kb())
        return
    for ad in ads:
        text = f"<b>–¢–∏–ø:</b> {ad[1].capitalize()}\n<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {ad[2]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {ad[3]}"
        if ad[4]:
            await message.answer_photo(ad[4], caption=text, reply_markup=get_main_kb())
        else:
            await message.answer(text, reply_markup=get_main_kb())

@dp.callback_query(F.data.startswith("delete_"))
async def delete_ad_callback(call: CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–£–¥–∞–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
        return
    ad_id = int(call.data.replace("delete_", ""))
    delete_ad(ad_id)
    try:
        await call.message.edit_caption("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=None)
    except:
        await call.message.edit_text("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=None)
    await call.answer("–£–¥–∞–ª–µ–Ω–æ.", show_alert=True)

@dp.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    await message.answer("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: @YourSupportUsername (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!)", reply_markup=get_main_kb())

@dp.message(F.text == "üåü –°–ø–æ–Ω—Å–æ—Ä—ã")
async def sponsors(message: Message):
    await message.answer("–°–ø–æ–Ω—Å–æ—Ä—ã:\n1. Amvera Hosting ‚Äî https://amvera.io\n2. –í–∞—à –Ω–∏–∫/–≥—Ä—É–ø–ø–∞ –∑–¥–µ—Å—å!", reply_markup=get_main_kb())

@dp.message(StateFilter("*"), F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def ad_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_kb())

@dp.message()
async def fallback(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.", reply_markup=get_main_kb())

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
