import os
import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InputMediaPhoto, InputFile, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU")
ADMIN_ID = 6712617550  # <-- –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user_id!

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
DB_NAME = "br_catalog.db"

def db_init():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS ads (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            type TEXT,
            title TEXT,
            description TEXT,
            photo_id TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

db_init()

# === –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ ===
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton('üõí –ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π'))
main_kb.add(KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'), KeyboardButton('üì¶ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'))
main_kb.add(KeyboardButton('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'), KeyboardButton('üåü –°–ø–æ–Ω—Å–æ—Ä—ã'))

type_kb = InlineKeyboardMarkup(row_width=2)
type_kb.add(
    InlineKeyboardButton("–ü—Ä–æ–¥–∞–∂–∞", callback_data="type_sell"),
    InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞", callback_data="type_buy")
)

cancel_kb = ReplyKeyboardMarkup(resize_keyboard=True).add('‚ùå –û—Ç–º–µ–Ω–∞')

# === –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø FSM ===
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

storage = MemoryStorage()

class AdForm(StatesGroup):
    type = State()
    title = State()
    description = State()
    photo = State()

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)

# === –•–≠–õ–ü–ï–†–´ –î–õ–Ø –ë–î ===
def add_ad(user_id, username, ad_type, title, desc, photo_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''
        INSERT INTO ads (user_id, username, type, title, description, photo_id)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, username, ad_type, title, desc, photo_id))
    conn.commit()
    conn.close()

def get_all_ads():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT id, user_id, username, type, title, description, photo_id, created_at FROM ads ORDER BY id DESC')
    ads = c.fetchall()
    conn.close()
    return ads

def get_user_ads(user_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT id, type, title, description, photo_id, created_at FROM ads WHERE user_id=? ORDER BY id DESC', (user_id,))
    ads = c.fetchall()
    conn.close()
    return ads

def delete_ad(ad_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('DELETE FROM ads WHERE id=?', (ad_id,))
    conn.commit()
    conn.close()

def get_ad(ad_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT id, user_id, username, type, title, description, photo_id, created_at FROM ads WHERE id=?', (ad_id,))
    ad = c.fetchone()
    conn.close()
    return ad

# === –ö–û–ú–ê–ù–î–´ –ò –ú–ï–ù–Æ ===

@dp.message_handler(commands=['start', 'menu'])
async def cmd_start(message: types.Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Black Russia.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=main_kb
    )

@dp.message_handler(lambda m: m.text == 'üõí –ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
async def ads_catalog(message: types.Message):
    ads = get_all_ads()
    if not ads:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ!", reply_markup=main_kb)
        return
    for ad in ads[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        text = f"{hbold('–¢–∏–ø:')} {ad[3].capitalize()}\n{hbold('–ó–∞–≥–æ–ª–æ–≤–æ–∫:')} {ad[4]}\n{hbold('–û–ø–∏—Å–∞–Ω–∏–µ:')} {ad[5]}\n{hbold('–ê–≤—Ç–æ—Ä:')} @{ad[2] if ad[2] else ad[1]}"
        kb = None
        if message.from_user.id == ADMIN_ID:
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{ad[0]}"))
        if ad[6]:
            await message.answer_photo(ad[6], caption=text, reply_markup=kb or main_kb)
        else:
            await message.answer(text, reply_markup=kb or main_kb)

@dp.message_handler(lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
async def add_ad_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=type_kb)
    await AdForm.type.set()

@dp.callback_query_handler(lambda c: c.data.startswith("type_"), state=AdForm.type)
async def ad_type_chosen(call: types.CallbackQuery, state: FSMContext):
    ad_type = call.data.replace("type_", "")
    await state.update_data(type=ad_type)
    await call.message.edit_text(f"–¢–∏–ø –≤—ã–±—Ä–∞–Ω: {('–ü–æ–∫—É–ø–∫–∞' if ad_type == 'buy' else '–ü—Ä–æ–¥–∞–∂–∞')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=None)
    await AdForm.title.set()

@dp.message_handler(state=AdForm.title)
async def ad_title_entered(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb)
        return
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=cancel_kb)
    await AdForm.description.set()

@dp.message_handler(state=AdForm.description)
async def ad_description_entered(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb)
        return
    desc = message.text
    if len(desc) > 400:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(description=desc)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞', –µ—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ):", reply_markup=cancel_kb)
    await AdForm.photo.set()

@dp.message_handler(content_types=['photo'], state=AdForm.photo)
async def ad_photo_entered(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    add_ad(
        user_id=message.from_user.id,
        username=message.from_user.username,
        ad_type=data['type'],
        title=data['title'],
        desc=data['description'],
        photo_id=photo_id
    )
    await state.finish()
    await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å —Ñ–æ—Ç–æ! ‚úÖ", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞", state="*")
async def ad_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb)

@dp.message_handler(content_types=['text'], state=AdForm.photo)
async def ad_no_photo(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_kb)
        return
    data = await state.get_data()
    add_ad(
        user_id=message.from_user.id,
        username=message.from_user.username,
        ad_type=data['type'],
        title=data['title'],
        desc=data['description'],
        photo_id=None
    )
    await state.finish()
    await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ (–±–µ–∑ —Ñ–æ—Ç–æ) ‚úÖ", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == 'üì¶ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
async def my_ads(message: types.Message):
    ads = get_user_ads(message.from_user.id)
    if not ads:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", reply_markup=main_kb)
        return
    for ad in ads:
        text = f"{hbold('–¢–∏–ø:')} {ad[1].capitalize()}\n{hbold('–ó–∞–≥–æ–ª–æ–≤–æ–∫:')} {ad[2]}\n{hbold('–û–ø–∏—Å–∞–Ω–∏–µ:')} {ad[3]}"
        if ad[4]:
            await message.answer_photo(ad[4], caption=text, reply_markup=main_kb)
        else:
            await message.answer(text, reply_markup=main_kb)

# === –£–î–ê–õ–ï–ù–ò–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ô (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù) ===
@dp.callback_query_handler(lambda c: c.data.startswith("delete_"))
async def delete_ad_callback(call: types.CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–£–¥–∞–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
        return
    ad_id = int(call.data.replace("delete_", ""))
    delete_ad(ad_id)
    await call.message.edit_caption("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=None)
    await call.answer("–£–¥–∞–ª–µ–Ω–æ.", show_alert=True)

# === –ü–û–î–î–ï–†–ñ–ö–ê, –°–ü–û–ù–°–û–†–´ ===
@dp.message_handler(lambda m: m.text == 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def support(message: types.Message):
    await message.answer("–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: @bunkoc (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!)", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == 'üåü –°–ø–æ–Ω—Å–æ—Ä—ã')
async def sponsors(message: types.Message):
    await message.answer("–°–ø–æ–Ω—Å–æ—Ä—ã:\n1. –ù–µ –∏–º–µ—é—Ç—Å—è. , reply_markup=main_kb)

# === –û–®–ò–ë–ö–ò ===
@dp.errors_handler()
async def errors_handler(update, error):
    print(f"–û—à–∏–±–∫–∞: {error}")
    return True

# === –°–¢–ê–†–¢ –ë–û–¢–ê ===
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)
